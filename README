
Multi-agent Epistemic Cooperation-Agnostic (MECA) Planner
david.buckingham@tufts.edu



+---------------------------------------+
|           TLDR: RUN EXAMPLE           |
+---------------------------------------+

$ make
$ make simulator
$ ./mecad problems/pizza.depl configs/example.conf pizza.plan
$ ./sim problems/pizza.depl pizza.plan



+---------------------------------------+
|               OVERVIEW                |
+---------------------------------------+

Features:

- Epistemic planning with false belief revision
- Ontic, sensing, and announcement actions
- Dynamic action observability
- Arbitrary numbers of system agents, whose actions the planner decides
- Arbitrary numbers of environment agents, who act independantly
- Agent models predict behavior of environement agents

The main features of the planner are described in two papers.  For explantions
of state representations, actions, action observability, and belief revision,
see (in preparation).  For explanations of agents, models, and the search
algorithm, see (in preparation).


 
+---------------------------------------+
|                BUILD                  |
+---------------------------------------+

Build the planer:

$ make

First, this builds the .depl parser, then it builds the planner.  Finally, it
generates "meca" and "mecad", which run the planner.  The difference is that
mecad turns on java asserts: most of the planner's run-time error checking uses
asserts instead of exceptions.  My theory is that once everything is working, we
can turn off asserts, since some of the checks are pretty slow.  I try to use
exceptions instead when checking user input such as problem files, configuration
files, and model files.


Build the simulator:

$ make simulator

This builds the simulator and generates "sim", which runs the simulator.


If things get weird:

$ make clean

Building java projects with Make can be tricky (See the O'Reilly book "Managing
Projects with GNU Make"), and I'm not that good at Make, or Java, anyway: this
build system is prone to breaking.



+---------------------------------------+
|                 EXAMPLE               |
+---------------------------------------+

$ ./mecad problems/pizza.depl configs/example.conf pizza.plan

The planner takes one required argument and two optional arguments.  The
required argument is a .depl file describing a planning problem.  The optional
arguments are a .conf configuration file, and a .plan filename where the
solution should be saved (serialized).  The order doesn't matter, the filename
extensions do.


$ ./sim problems/pizza.depl pizza.plan

The simulator takes two required arguments: a .depl and a .plan.  It starts in
the initial state and applies s-agent actions as specified in the plan and
e-agent actions as specified by their models. When an e-agent model returns
multiple actions, the simulator asks the user to select one.



+---------------------------------------+
|                 TODO                 |
+---------------------------------------+

DEPL
STATE DEPICTION
CONFIG FILES



+---------------------------------------+
|               CODE TOUR               |
+---------------------------------------+

The planner code is in /src/mecaPlanner

Planner.java
The main class for running the planner. Reads options, and planner input, runs
search, prints/saves solution.

Domain.java
A static class, gets filled out from a .depl file.

Maybe these three classes should be organized in a "search" directory.
Search.java
The search algorithm
Solution.java
A Solution is a perspective node is a perspective tree.
Perspective.java
Just a wrapper so we can be flexible about how to represent agent perspectives.
Right now, its an NDState, but for interfacing with ADE we will want it to be a World.

state/
Classes for representing epistemic state with Kripke structures.

state/Initialize
Use the Son et al. algorithm to build a start state from a finitary S5 theory.

actions/
Actions transition state.

models/
Predictive models for e-agents.

src/deplParser
The .depl grammar and code that works with ANTLR to build a parser for .depl.

src/simulator/Simulator.java
The simulator.

src/translators
Antler code for translating some other problem representations to .depl.
These are hacky and targeted at example suites from some other EP planners.

