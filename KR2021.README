
To reproduce the state transition examples presented in "A Multi-Agent
Epistemic and Doxastic Action Language with Belief Revision and Local Dynamic
Observability" simply:

$ make kr2021
$ ./kr2021

Hopefully formats of the state representations are clear. For example, state s1'
(Figure 1 from the paper) is given as:

*w1{b()}
  B(t) = w1, w2
  K(t) = w1, w2
  B(m) = w1
  K(m) = w1
w2{}
  B(t) = w1, w2
  K(t) = w1, w2
  B(m) = w2
  K(m) = w2

Here there are two worlds, named "w1" and "w2". There is an asterisk before "w1"
because it is the designated world. In "w1" the fluent "b()" is true. In "w2" no
fluents are true". In "w1" the Belief relation for agent "t" points to "w1" and
"w2", the Knowledge relation for agent "t" points to "w1" and "w2", the Belief
relation for agent "m" points only to "w1", etc. Note that generated states
(resulting from an action) will name worlds with numbers only (without the "w").
For example, the worlds in state "s1'" are named "3" and "5". The names of
worlds here do not include all of the information encoded within the names of
generated worlds in the paper, that formalism was used for ease of presentation.

The state transition system presented in the paper is implemented exclusively
within the file:
.../src/mecaPlanner/Transition.java

The epistemic-doxastic state representation is implemented across several files
within the directory:
.../src/mecaPlanner/state

The example scenarios are described in the files:
.../problems/kr2021/bicycle1.depl
.../problems/kr2021/bicycle2.depl
.../problems/kr2021/bicycle3.depl

Hopefully the .depl format is clear. It is partially documented in:
.../docs/manual.pdf

