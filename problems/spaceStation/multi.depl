// domain for multi-agent role reassignment case (1H2R, simple environment and actions)

types{
    human-actor,
    robot-actor,
    actor-locatable,  // for use in predicates
    locatable-object,
    location-object,
    tool-object,
    role-object
}

objects{
    alpha-location,
    beta-location,
    gamma-location,
    robot1-robot,
    robot2-robot,
    brad-human,
    microphone-tool,
    welder-tool,
    commander-role,
    scout-role,
    repair-role,
}

// can be used as agents in belief formulae, observe, and can be assigned models
sagents{
    robot1,
    robot2,
}

eagents{
    brad{HumanModel},
}

predicates{
    damaged(alpha),
    damaged(beta),
    damaged(gamma),
    on(alpha),
    on(beta),
    on(gamma),
    off(alpha),
    off(beta),
    off(gamma),
    inLocation[?a - locatable, ?b - location](?a,?b),
    working[?a- agent, ?t - tool](?a,?t),
    hasRole[?a - agent, ?r - role](?a,?r),
    //moved[?a-agent,?l-location](?l),
    repaired[?l-location](?l),
    // add belief and common knowledge?
}

initially{
    damaged(alpha),
    ~damaged(beta),
    ~damaged(gamma),
    on(alpha),
    on(beta),
    on(gamma),
    inLocation(brad, alpha),
    inLocation(robot1, alpha),
    inLocation(robot2, beta),
    working(robot1, microphone),
    working(robot2, microphone),
    ~working(robot1, welder),
    working(robot2, welder),
    hasRole(robot1, repair),
    hasRole(robot2, repair),
    hasRole(brad, commander),
    C(B_brad(inLocation(robot1,alpha)) & B_brad(inLocation(robot2,beta))),
    C(B_robot1(inLocation(brad,alpha)) & B_robot1(inLocation(robot1,alpha))),
    C(B_robot2(inLocation(brad,alpha)) & B_robot2(inLocation(robot1,alpha))),
}

goals{

    ~damaged(alpha) & on(alpha),
}

actions{
    move_from_location_to_location[?a-actor](alpha,beta){
        owner{?a},
        cost{2},
        precondition{inLocation(?a,alpha)},
        precondition{~inLocation(?a,beta)},
        observes[?o-actor]{?o},
	causes{inLocation(?a,beta)},
        causes{~(inLocation(?a,alpha))},
    }

    move_from_location_to_location[?a-actor](beta,alpha){
        owner{?a},
        cost{2},
        precondition{inLocation(?a,beta)},
        precondition{~inLocation(?a,alpha)},
        observes[?o-actor]{?o},
	causes{inLocation(?a,alpha)},
        causes{~(inLocation(?a,beta))},
    }

    move_from_location_to_location[?a-actor](alpha,gamma){
        owner{?a},
        cost{2},
        precondition{inLocation(?a,alpha)},
        precondition{~inLocation(?a,gamma)},
        observes[?o-actor]{?o},
	causes{inLocation(?a,gamma)},
        causes{~(inLocation(?a,alpha))},
    }

    move_from_location_to_location[?a-actor](gamma,alpha){
        owner{?a},
        cost{2},
        precondition{inLocation(?a,gamma)},
        precondition{~inLocation(?a,alpha)},
        observes[?o-actor]{?o},
	causes{inLocation(?a,alpha)},
        causes{~(inLocation(?a,gamma))},
    }

    move_from_location_to_location[?a-actor](beta,gamma){
        owner{?a},
        cost{2},
        precondition{inLocation(?a,beta)},
        precondition{~inLocation(?a,gamma)},
        observes[?o-actor]{?o},
	causes{inLocation(?a,gamma)},
        causes{~(inLocation(?a,beta))},
    }

    move_from_location_to_location[?a-actor](gamma,beta){
        owner{?a},
        cost{2},
        precondition{inLocation(?a,gamma)},
        precondition{~inLocation(?a,beta)},
        observes[?o-actor]{?o},
	causes{inLocation(?a,beta)},
        causes{~(inLocation(?a,gamma))},
    }
    
    wait[?a-actor]() {
        owner{?a},
	cost{1},
    }

    repair[?r-robot, ?l-location](?l){
        owner{?r},
	cost{2},
	precondition{hasRole(?r,repair)},
        precondition{damaged(?l)},
	precondition{inLocation(?r,?l)},
        precondition{off(?l)},
	observes[?r-robot]{?r},
        observesif[?o - actor]{?o,inLocation(?o,?l)},
        causes{~(damaged(?l))},
	causes{repaired(?l)},
    }

    turn_panel_on[?l-location](?l){
        owner{brad},
        cost{2},
	precondition{repaired(?l)},
        precondition{inLocation(brad,?l)},
        precondition{off(?l)},
        observesif[?o - actor]{?o,inLocation(?o,?l)},
	causes{on(?l)},
    }


    turn_panel_off[?l-location](?l) {
        owner{brad},
        cost{2},
        precondition{inLocation(brad,?l)},
        precondition{on(?l)},
	precondition{damaged(?l)},
        observesif[?o - actor]{?o,inLocation(?o,?l)},
        causes{off(?l)},
    }


//    monitor_wing[?r-robot, ?w-location, ?t-tube](?w,?t) {
//        owner{?r},
//        cost{0},
//        precondition{inLocation(?r,?w)},
//        determines{damaged(?t)},
//    }

    announce_repair[?r-robot,?l-location](?l){
	owner{?r},
    	cost{1},
	precondition{inLocation(?r,?l)},
    	precondition{repaired(?l)},
	precondition{(~B_brad(damaged(?l)) | B_brad(~damaged(?l)))},
    	observes[?o-actor]{?o},   
    	announces{repaired(?l)},
    }

//    announce_move[?a-actor,?l-location](?t){
//	owner{robot1},
//	cost{0},
//      precondition{moved(robot1,?l)},
//	precondition{announces(at(robot1,?l))},
//	observes[?o-actor]{?o},   
//	announces{moved(robot1,?l)},
//    }

    announce_damaged[?r-robot,?l-location](?l){
	owner{?r},
	cost{1},
	precondition{hasRole(?r,scout)},
	precondition{inLocation(?r,?l)},
	precondition{damaged(?l)},
        precondition{(~B_brad(damaged(?l))},
	observes[?o-actor]{?o},   
	announces{damaged(?l)},
    }

    announce_on[?r-robot,?l-location](?l){
	owner{?r},
	cost{1},
	precondition{hasRole(?r,scout)},
	precondition{on(?l)},
	precondition{inLocation(?r,?l)},
	observes[?o-actor]{?o},   
	announces{on(?l)},
    }

    announce_off[?r-robot,?l-location](?l){
	owner{?r},
	cost{1},
	precondition{hasRole(?r,scout)},
	precondition{off(?l)},
	precondition{inLocation(?r,?l)},
	observes[?o-actor]{?o},   
	announces{off(?l)},
    }

    switch_role_scout[?r-robot](){
        owner{?r},
	cost{1},
	precondition{hasRole(?r,repair)},
        precondition{~working(?r,welder)},
        observes[?r-robot]{?r},
        causes{hasRole(?r,scout)},
	causes{~hasRole(?r,repair)},
    }

    switch_role_repair[?r-robot](){
        owner{?r},
	cost{1},
	precondition{hasRole(?r,scout)},
        precondition{~working(?r,microphone)},
        observes[?r-robot]{?r},
        causes{hasRole(?r,repair)},
	causes{~hasRole(?r,scout)},
    }
}
