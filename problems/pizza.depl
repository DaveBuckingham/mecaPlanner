types{
    Robot-Actor,
    Human-Actor,
    Actor-Locatable,
    Food-Locatable,
    Locatable-Object,
    Location-Object
}

objects{
    robot1-Robot,
    human1-Human,
    pizza-Food,
    hotdog-Food,
    room1 - Location,
    room2 - Location,
}

agents{
    robot1,
    human1{PizzaAgent},
}

fluents{
    at(Locatable, Location),
    human_hungry(),
    door_open(),
    robot_charged(),
}

start{(at(human1,room1),
       at(robot1,room1),
       at(pizza,room1),
       at(hotdog,room2),
       human_hungry()
      )
}

goals{
    robot_charged(),
    Timestep==5,
    Timestep~=6,
}

actions{
    <?a-Actor,?f-Location,?t-Location>move(
        owner ?a,
        precondition at(?a,?f) & ~(at(?a,?t)) & door_open(),
        <?o-Actor>observes ?o,
        causes at(?a, ?t),
        causes ~(at(?a, ?f)),
    )

    open_door(
        owner human1,
        precondition ~door_open(),
        <?o-Actor>observes ?o,
        causes door_open(),
    )

    charge(
        owner robot1,
        precondition at(robot1,room2),
        <?o-Actor>observes ?o,
        causes robot_charged(),
    )

    <?f-Food,?l-Location,?r-Robot>eat(
        owner ?r,
        precondition at(?r, ?l) & at(?f, ?l),
        <?o-Actor>observes ?o,
        causes ~(at(?f, ?l)),
    )

    <?f-Food,?l-Location,?h-Human>eat(
        owner ?h,
        precondition
            at(?h, ?l) &
            at(?f, ?l),
        <?o-Actor>observes ?o,
        causes ~(at(?f, ?l)),
        causes ~(human_hungry()),
    )

    <?a - Actor>wait(
        owner ?a,
        <?o-Actor>observes ?o,
    )
}
