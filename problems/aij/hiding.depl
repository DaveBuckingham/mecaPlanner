//////////////////////////////////////////
//                                      
//                      +-------+               
//                      |       |       
//              +-------+       |
//              | box4         8|
//              | robot +--   --+
//              |      6  box5  |
//              +--   --+       |
//              |       |      7|
//              |       +-------+
//              |      5|
//              +--   --+
//              | box2  |
//              | box3  |
//              |      4|
//              +--   --+
//              | box1  |                      
//              |       |                      
//              |      3|                      
//              +--   --+-------+              
//              |       | human |              
//              |               |              
//              |      2|      1|              
//              +-------+-------+
// "some rooms contain boxes, you must reach the box that is in room 6
//  within 6 timesteps. there is also a robot in room 6. if the robot 
//  sees you, it will try to prevent you from reaching the box.
//
//                                      
// 1 R: wait
//   H: move12
// 2 R: (look at human) pickupBox4
//   H: move23
// 3 R: move67
//   H: move34
// 4 R: dropBox4
//   H: move45
// 5 R: pickupBox5
//   H: move56 (see robot)
// 6 R: (look at human) move78
//   H: move68
//
// Failed: human location: room 8, target box location: room 7
//
////////////////////////////////////////


types{
    robot-actor,
    human-actor,
    actor-locatable,
    box-holdable,
    holdable-locatable,
    locatable-object,
    location-object
}

objects{
    robot1-robot,
    human1-human,
    room1 - location,
    room2 - location,
    room3 - location,
    room4 - location,
    room5 - location,
    room6 - location,
    room7 - location,
    room8 - location,
    box1 - box,
    box2 - box,
    box3 - box,
    box4 - box,
    box5 - box,
}

agents{
    human1{BurglerModel},
    robot1,
}

atoms{
    at[?a - locatable, ?b - location](?a,?b),
    has[?a - actor, ?h - holdable](?a,?h),
    loaded[?a - actor](?a),
    human_succeeded(),
}

constants{
    covisible(room1,room2),
    covisible(room2,room3),
    covisible(room2,room4),
    covisible(room2,room5),
    covisible(room2,room6),
    covisible(room3,room4),
    covisible(room3,room5),
    covisible(room3,room6),
    covisible(room4,room5),
    covisible(room4,room6),
    covisible(room5,room6),
    covisible(room6,room7),
    covisible(room6,room8),
    covisible(room7,room8),

    covisible(room2,room1),
    covisible(room3,room2),
    covisible(room4,room2),
    covisible(room5,room2),
    covisible(room6,room2),
    covisible(room4,room3),
    covisible(room5,room3),
    covisible(room6,room3),
    covisible(room5,room4),
    covisible(room6,room4),
    covisible(room6,room5),
    covisible(room7,room6),
    covisible(room8,room6),
    covisible(room8,room7),

    adjacent(room1,room2),
    adjacent(room2,room3),
    adjacent(room3,room4),
    adjacent(room4,room5),
    adjacent(room5,room6),
    adjacent(room6,room5),
    adjacent(room5,room4),
    adjacent(room4,room3),
    adjacent(room3,room2),
    adjacent(room2,room1),
    adjacent(room6,room7),
    adjacent(room7,room6),
    adjacent(room7,room8),
    adjacent(room8,room7),
    adjacent(room6,room8),
    adjacent(room8,room6),
}

initially{
    //at(human1, room1),
    // FOR WITHOUT ROBOT WAIT
    at(human1, room2),
    at(robot1, room6),
    at(box1, room3),
    at(box2, room4),
    at(box3, room4),
    at(box4, room6),
    at(box5, room7),
}

goals{
    ~human_succeeded() & timestep==7
}

actions{
    move[?f-location,?t-location](?f,?t){
        owner{human1},
        precondition{at(human1, ?f)},
        precondition{adjacent(?f,?t)},
        observesif[?l - location]{robot1, (at(robot1,?l) & (covisible(?l,?f) | covisible(?l,?t)))}
        observes{human1},
        causes{at(human1, ?t)},
        causes{~(at(human1, ?f))},
        causesif{human_succeeded, at(box4, ?t)}
    }

    move[?f-location,?t-location](?f,?t){
        owner{robot1},
        precondition{at(robot1, ?f)},
        precondition{adjacent(?f,?t)},
        precondition[?b - box]{~has(robot1,?b)},
        observesif[?l - location]{human1, (at(human1,?l) & (covisible(?l,?f) | covisible(?l,?t)))}
        observes{robot1},
        causes{at(robot1, ?t)},
        causes{~(at(robot1, ?f))},
    }

    move_box[?f-location,?t-location,?b-box](?f,?t,?b){
        owner{robot1},
        precondition{at(robot1, ?f)},
        precondition{adjacent(?f,?t)},
        precondition{has(robot1, ?b)},
        observesif[?l - location]{human1, (at(human1,?l) & (covisible(?l,?f) | covisible(?l,?t)))}
        observes{robot1},
        causes{at(robot1, ?t)},
        causes{at(?b, ?t)},
        causes{~(at(robot1, ?f))},
        causes{~(at(?b, ?f))},
    }

    pickup_box[?l-location,?b-box](?l,?b){
        owner{robot1},
        precondition{at(robot1, ?l)},
        precondition{at(?b, ?l)},
        precondition{~loaded(robot1)}
        observesif[?hl - location]{human1, (at(human1,?hl) & covisible(?hl,?l))},
        observes{robot1},
        causes{has(robot1, ?b)},
        causes{loaded(robot1)}
    }

    drop_box[?l-location,?b-box](?l,?b){
        owner{robot1},
        precondition{at(robot1, ?l)},
        precondition{has(robot1, ?b)},
        observesif[?hl - location]{human1, (at(human1,?hl) & covisible(?hl,?l))},
        observes{robot1},
        causes{~has(robot1, ?b)},
        causes{~loaded(robot1)}
    }

    wait[?a - actor,?l-location](?l) {
        owner{?a},
        precondition{at(?a, ?l)},
        observes{?a},
        observesif[?o-actor,?ol - location]{?o, (at(?o,?ol) & covisible(?ol,?l))},
    }

}
