types{
    Robot-Actor,
    Human-Actor,
    Actor-Locatable,
    Spill-Locatable,
    Locatable-Object,
    Location-Object
}

objects{
    r-Robot,
    h-Human,
    a1 - Location,
    a2 - Location,
    a3 - Location,
    back - Location,
    front - Location,
}

agents{
    r,
    h{SlipAgent},
}

fluents{
    at(Locatable,Location),
    f(Actor),
    spill(Location),
}

constants{
    !connected(Location, Location),
    connected(back,a1),
    connected(front,a1),
    connected(back,a2),
    connected(a2,a3),
    connected(front,a3),
}

//start{(at(r,a1),
//       at(h,back),
//       spill(a1),
//       B[h](!spill(a1)),
//      )
//}

start{(
    *u{at(r,a1),at(h,back),spill(a1)},
     v{at(r,a1),at(h,back)},
     r{u-u,v-v}
     h{u-v,v-v}
)}


goals{
    !f(h),
    Timestep==3,
    Timestep~=4,
}

actions{
    <?a-Actor,?f-Location,?t-Location>move(
        owner ?a,
        precondition at(?a,?f) & ~(at(?a,?t)) & (connected(?f,?t) | connected(?t,?f)) & !f(?a),
        <?o-Actor>observes ?o,
        causes at(?a, ?t),
        causes ~(at(?a, ?f)),
        causes f(?a) <- (f(?a) | spill(?t))
    )

    <>slip(
        owner r,
        precondition spill(a1),
        <?o-Actor>observes ?o,
        causes f(r),
    )

    <?a - Actor>wait(
        owner ?a,
        <?o-Actor>observes ?o,
    )
}
