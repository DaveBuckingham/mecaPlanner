// domain for base case (1H1R, simple environment and actions)

types{
    human-actor,
    robot-actor,
    actor-locatable,  // for use in predicates
    locatable-object,
    location-object,
}

objects{
    alpha-location,
    beta-location,
    gamma-location,
    robot1-robot,
    brad-human,
}

// can be used as agents in belief formulae, observe, and can be assigned models
sagents{
    robot1,
}

eagents{
    brad{HumanModel},
}

predicates{
    damaged(alpha),
    damaged(beta),
    damaged(gamma),
    on(alpha),
    on(beta),
    on(gamma),
    inLocation[?a - locatable, ?b - location](?a,?b),
    repaired[?l-location](?l),
}

constants{}

initially{
    damaged(alpha),
    on(alpha),
    inLocation(brad,alpha),
    inLocation(robot1,alpha),
}

goals{
//    (~damaged(alpha) & on(alpha)) | (~damaged(beta) & on(beta)) | (~damaged(gamma) & on(gamma)),
//    ~damaged(alpha),
    ~damaged(alpha) & on(alpha)
}

actions{

    move[?a-actor, ?f-location, ?t-location](?f,?t){
        owner{?a},
        cost{2},
        precondition{inLocation(?a,?f)},
        precondition{~inLocation(?a,?t)},
        observes{?a},
        observesif[?o - actor]{?o,inLocation(?o,?t)},
	causes{inLocation(?a,?t)},
        causes{~inLocation(?a,?f)},
    }

    
    wait[?a-actor]() {
        owner{?a},
	cost{1},
    }

    repair[?r-robot, ?l-location](?l){
        owner{?r},
	cost{2},
        precondition{damaged(?l)},
	precondition{inLocation(?r,?l)},
        precondition{~on(?l)},
        observesif[?o - actor]{?o,inLocation(?o,?l)},
        causes{~damaged(?l)},
	causes{repaired(?l)},
    }

    turn_panel_on[?l-location](?l){
        owner{brad},
        cost{2},
	precondition{inLocation(brad,?l)},
	precondition{~damaged(?l)},        
        precondition{~on(?l)},
        observesif[?o - actor]{?o,inLocation(?o,?l)},
	causes{on(?l)},
    }

    turn_panel_off[?l-location](?l) {
        owner{brad},
        cost{2},
        precondition{inLocation(brad,?l)},
        precondition{on(?l)},
	precondition{damaged(?l)},
        observesif[?o - actor]{?o,inLocation(?o,?l)},
	causes{~on(?l)},
    }


//    assuming this is automatically done
//    monitor_wing[?r-robot, ?w-location, ?t-tube](?w,?t) {
//        owner{?r},
//        cost{0},
//        precondition{inLocation(?r,?w)},
//        determines{damaged(?t)},
//    }

/*    announce_damaged[?r-robot,?l-location](?l){
	owner{?r},
	cost{1},
	precondition{inLocation(?r,?l)},
	precondition{damaged(?l)},
        precondition{(~B_brad(damaged(?l))},
	observes[?o-actor]{?o},   
	announces{damaged(?l)},
    }

    announce_on[?r-robot,?l-location](?l){
	owner{?r},
	cost{1},
	precondition{on(?l)},
	precondition{inLocation(?r,?l)},
	observes[?o-actor]{?o},   
	announces{on(?l)},
    }

    announce_off[?r-robot,?l-location](?l){
	owner{?r},
	cost{1},
	precondition{~on(?l)},
	precondition{inLocation(?r,?l)},
	observes[?o-actor]{?o},   
	announces{~on(?l)},
    }*/
}
