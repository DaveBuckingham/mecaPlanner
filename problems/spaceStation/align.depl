// domain for SMM alignment case (1H1R, simple environment and actions)

types{
    human-actor,
    robot-actor,
    actor-locatable,  // for use in predicates
    locatable-object,
    location-object,
}

objects{
    alpha-location,
    beta-location,
    gamma-location,
    robot1-robot,
    brad-human,
}

// can be used as agents in belief formulae, observe, and can be assigned models
sagents{
    robot1,
}

eagents{
    brad{HumanModel},
}

predicates{
    damaged(alpha),
    damaged(beta),
    damaged(gamma),
    on(alpha),
    on(beta),
    on(gamma),
    inLocation[?a - locatable, ?b - location](?a,?b),
    moved[?r-robot,?l-location](?r,?l)
}

constants{}

initially{
    on(alpha),
    on(beta),
    on(gamma),
    inLocation(brad,alpha),
    inLocation(robot1,alpha),
}

goals{
    inLocation(robot1, gamma) & B_brad(inLocation(robot1, gamma))
}

actions{

    move[?a-actor, ?f-location, ?t-location](?f,?t){
        owner{?a},
        cost{2},
        precondition{inLocation(?a,?f)},
        precondition{~(inLocation(?a,?t))},
        observesif[?o - actor]{?o,inLocation(?o,?t)},
        observes{?a},
	causes{inLocation(?a,?t)},
        causes{~(inLocation(?a,?f))},
    }

    wait[?a-actor]() {
        owner{?a},
	cost{1},
    }

//    repair[?r-robot, ?l-location](?l){
//        owner{?r},
//	cost{2},
//        precondition{damaged(?l)},
//        precondition{inLocation(?r,?l)},
//        precondition{~(on(?l))},
//        observesif[?o - actor]{?o,inLocation(?o,?l)},
//        causes{~(damaged(?l))},
//    }
//
//    turn_panel_on[?l-location](?l){
//        owner{brad},
//        cost{2},
//        precondition{repaired(?l)},
//        precondition{inLocation(brad,?l)},
//        precondition{~(on(?l))},
//        observesif[?o - actor]{?o,inLocation(?o,?l)},
//	causes{on(?l)},
//    }
//
//
//    turn_panel_off[?l-location](?l) {
//        owner{brad},
//        cost{2},
//        precondition{inLocation(brad,?l)},
//        precondition{on(?l)},
//	precondition{damaged(?l)},
//        observesif[?o - actor]{?o,inLocation(?o,?l)},
//        causes{~(on(?l))},
//    }


//    monitor_wing[?r-robot, ?w-location, ?t-tube](?w,?t) {
//        owner{?r},
//        cost{0},
//        precondition{inLocation(?r,?w)},
//        determines{damaged(?t)},
//    }

//    announce_repair[?r-robot,?l-location](?l){
//	owner{?r},
//    	cost{1},
//	precondition{inLocation(?r,?l)},
//    	precondition{repaired(?l)},
//	precondition{(~B_brad(damaged(?l)))},
//    	observes[?o-actor]{?o},   
//    	announces{repaired(?l)},
//    }
//
    announce_moved[?l-location](?l){
        owner{robot1},
        cost{1},
        precondition{inLocation(robot1,?l)},
        precondition{~B_brad(inLocation(robot1,?l))},
        observes[?o-actor]{?o},   
        announces{inLocation(robot1,?l)},
    }

//      announce_damaged[?r-robot,?l-location](?l){
// 	owner{?r},
// 	cost{1},
// 	precondition{inLocation(?r,?l)},
// 	precondition{damaged(?l)},
//         precondition{(~B_brad(damaged(?l)},
// 	observes[?o-actor]{?o},   
// 	announces{damaged(?l)},
//     }
// 
//     announce_on[?r-robot,?l-location](?l){
// 	owner{?r},
// 	cost{1},
// 	precondition{on(?l)},
// 	precondition{inLocation(?r,?l)},
// 	observes[?o-actor]{?o},   
// 	announces{on(?l)},
//     }
// 
//     announce_off[?r-robot,?l-location](?l){
// 	owner{?r},
// 	cost{1},
// 	precondition{off(?l)},
// 	precondition{inLocation(?r,?l)},
// 	observes[?o-actor]{?o},   
// 	announces{off(?l)},
//     }
}
