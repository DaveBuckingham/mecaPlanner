types{}

objects{thief-Object}

agents{thief}

passive{}

fluents{v(),l(),r(),d()}

initially{

{
r() &
!B[thief](r()) &
!B[thief](!r())
}

{
!r() &
!B[thief](r()) &
!B[thief](!r())
}

//*w1 <- {r()},
//*w2 <- {},
//B[thief] <- {(w1,w1),(w1,w2),(w2,w2),(w2,w1)},
//K[thief] <- {(w1,w1),(w1,w2),(w2,w2),(w2,w1)}

}


goals{d()}

actions{

    take_left(){
        owner{thief},
        precondition{v() & ~d() & ~r()},
        observes{thief},
        causes{d()}
    }

    take_right(){
        owner{thief},
        precondition{v() & ~d() & r()},
        observes{thief},
        causes{d()}
    }

    flick(){
        owner{thief},
        precondition{v()},
        observes{thief},
        determines{r()}
    }

    move(){
        owner{thief},
        precondition{true},
        observes{thief},
        causes{v() if ~v()},
        causes{~v() if v()}
    }

}
